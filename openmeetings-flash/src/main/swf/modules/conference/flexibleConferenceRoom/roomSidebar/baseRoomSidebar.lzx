<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
	  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  
-->
<library>

<class name="baseRoomSidebar" extends="view" width="1" bgcolor="$once{ canvas.getThemeColor('mainBackgroundColor') }" 
		height="${ canvas.height }" y="0">
	
	<handler name="oninit">
		//set modus
		canvas.thishib.modus = canvas.currentRoomObj.type;
		
		//set reference, this reference will be cleared at *ontabcontenctleave* event
		canvas._videocontainer = this;
		
		setRoomModerators();
	</handler>

	<view name="_filearea" x="0" y="0" height="${ parent.height }" width="1">
		<attribute name="currentTrackGroupName" value="fileExplorer" type="string" />
		<attribute name="currentDragItem" value="null" />
		<handler name="oninit">
			canvas.currentImagesListdraw = this;
		</handler>
	</view>

	<method name="setRoomModerators">
	<![CDATA[
		var moders = canvas.currentRoomObj.moderators;
		if ($debug) Debug.write("setRoomModerators: ", moders);
		canvas.becomeSuperModerator = false;
		
		this.setRoomValues.applyDefaultModeration = canvas.becomemoderator;
		canvas.becomeSuperModerator = canvas.becomemoderator;
		
		if (!canvas.becomeSuperModerator) {
			for (var i = 0; i < moders.length; ++i) {
				if (moders[i].user.id == canvas.userId) {
					this.setRoomValues.applyDefaultModeration = true;
					canvas.becomeSuperModerator = moders[i].superModerator;
					if ($debug) Debug.info("Make this User to an Moderator");
					break;
				}
			}
		}
		
		if ($debug) Debug.write("canvas.becomemoderator: ", canvas.becomemoderator);
		if ($debug) Debug.write("canvas.becomeSuperModerator: ", canvas.becomeSuperModerator);
		
		canvas.currentusercolor = canvas.getColorForUser();
		
		if ($debug) Debug.write(hib.userobject); 
		this.setRoomValues.doCall();
	]]>
	</method>

	<netRemoteCallHib name="setRoomValues" funcname="setRoomValues" remotecontext="$once{ canvas.thishib }" >   
		<attribute name="applyDefaultModeration" value="false" type="boolean" />
		<attribute name="groupId" value="0" type="number" />
		<netparam><method name="getValue">return hib.currentroomid;</method></netparam>
		<netparam><method name="getValue">return parent.applyDefaultModeration;</method></netparam>
		<netparam><method name="getValue">return canvas.becomeSuperModerator;</method></netparam>
		<netparam><method name="getValue">return canvas.currentusercolor;</method></netparam>
		<handler name="ondata" args="roomStatus">
		<![CDATA[
			//The onResult-Handler will be called be the rtmpconnection
			if ($debug) Debug.write("setRoomValues1: ", roomStatus);
			//if ($debug) Debug.write("setRoomValues2: ", hib.currentroomid);
			
			//if ($debug) Debug.write("+++++++++++++++++ getClientListScope : ",value);
			
			if (roomStatus.browserStatus.browserInited) {
				var tObj = new Object();
				tObj[0] = "newBrowserURL";
				tObj[1] = roomStatus.browserStatus.currentURL;
				canvas.startBrowser(tObj);
			}
			
			var value = roomStatus.clientList;
			
			for (var i = 0; i < value.length; ++i){
				if ( value[i].streamid == canvas.streamid ) {
					canvas.isAllowedToDraw = value[i].canDraw;
				}
				parent.addItemInitial(value[i]);
			}
			parent.batchCreateVideo(value);
		]]>
		</handler>  
	</netRemoteCallHib>

	<method name="batchCreateVideo" args="clients">
	<![CDATA[
		if ($debug) Debug.write("interval 0 :: ", clients.length);
		canvas.commonVideoViewContent.batchCreateVideo(canvas.streamid, clients);
			
		//this content must be inited _after_ setting the default values
		canvas.thishib.getCurrentModeratorList.doCall();
		//FIXME Issue-1076
		canvas.thishib.checkLzRecording.doCall();
	]]>
	</method>

	<!-- invoked if another client logs into the room 
	after choosing devices -->	 
	<method name="setAVSettingsToClient" args="rcl">
		canvas.commonVideoViewContent.setAVSettingsToClient(rcl);
	</method> 

	<method name="addItemInitial" args="object">
	<![CDATA[
		//if ($debug) Debug.write("initializeStreams addItem: ", object);
	]]>
	</method>

	<method name="receiveExclusiveAudioFlag" args="publicSID">
	<![CDATA[
		var vList = this._participants._table.renderList;
		for (var i = 0;i < vList.length; ++i) {
			var item = vList[i];
			var rcl = new Object();

			rcl.publicSID = item.publicSID;
			rcl.micMuted = !(publicSID == item.publicSID);
			canvas.setMuteStatus(rcl);
		}
	]]>
	</method>


	<method name="addItem" args="connectedSince,isMod,streamid,username,userroom,formatedDate,position,color,object">
	<![CDATA[
		if ($debug) Debug.write("initializeStreams addItem: ",connectedSince,isMod,streamid,username,formatedDate);
		
		//Do init only in case this stream is NOT the same as we are
		if (streamid != canvas.streamid) {
			canvas.commonVideoViewContent.createVideo(object.publicSID, object.firstname+' '+object.lastname, object.broadCastID, object.avsettings, -1, object);
		}
	]]>
	</method>
	
	<method name="addClientItem" args="connectedSince,isMod,streamid,username,roomId,formatedDate,position,color,object">
	<![CDATA[
		if ($debug) Debug.write("### initializeStreams addClientItem: ",connectedSince,isMod,streamid,username,roomId,formatedDate);

		if (canvas.publicSID != object.publicSID){
			canvas.commonVideoViewContent.createVideoObject(object.publicSID, false, -1, object);
		}
	]]>
	</method>
		
	<!--
		invoked whenever a User starts to Stream Video in this Room, 
		interviewPodId has only a meaning in the Room Type Interview
	 -->		
	<method name="startStream" args="publicSID,broadcastId,firstname,lastname,interviewPodId,VWidth,VHeight">
		canvas.commonVideoViewContent.startStream(publicSID,broadcastId,firstname,lastname,interviewPodId,VWidth,VHeight);
	</method>

	<method name="closeStreamClient" args="publicSID">
		canvas.commonVideoViewContent.closeStreamClient(publicSID);
	</method>

	<method name="resetAllValues">
		canvas.commonVideoViewContent.resetAllValues();
	</method>
	
	<method name="removeVideoByUser" args="userObject">
		canvas.commonVideoViewContent.removeVideoByUser(userObject.publicSID);
	</method>
	
	<!--- 
		stops the streaming but and destroys the view
		@param int broadcastId broadcastId
	 -->
	<method name="disconnectclient" args="publicSID">
		canvas.commonVideoViewContent.disconnectclient(publicSID);
	</method>

	<method name="updateMuteStatusVideoView" args="roomClient">
		canvas.commonVideoViewContent.updateMuteStatusVideoView(roomClient);
	</method>
</class>

</library>
