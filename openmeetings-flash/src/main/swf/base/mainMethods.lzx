<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
	  http://www.apache.org/licenses/LICENSE-2.0
		  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  
-->

<!-- methods for main.lzx -->

<library>
	<switch>
		<when property="$as3">
			<passthrough>
				import flash.display.*;
				import flash.events.*;
				import flash.external.ExternalInterface;
				import flash.net.*;
			</passthrough>
		</when>
	</switch>

	<attribute name="colorArray" value="null" />
	<attribute name="errorLoader" />
	
	<method name="getColorForUser">
		<![CDATA[
		   var colorArray = [0x92E8A4,0xC2F1FF,0xFFFCAE,0xE8C792,0xFF8073,
							0xE8DB87,0xAFFFB8,0xBED4FF,0xE0BBE8,0xFFBBA5];
		   return colorArray[Math.round(Math.random()*10)];
		]]>
	</method>
	
	<method name="remoteLogWrite" args="message">
		if ($debug) Debug.warn("remoteLogWrite:: ", message);
		if (!errorLoader) {
			errorLoader = new RestCall({
				url: canvas.getUrl() + 'services/error/report/'
				, method: URLRequestMethod.POST
			});
		}
		var vars:URLVariables = new URLVariables();
		vars.message = message;
		errorLoader.load(vars);
	</method>
	
	<method name="getHttpHost">
   	<![CDATA[
		if (canvas.httphostlocal != null && canvas.httphostlocal.length > 0) {
			return canvas.httphostlocal;
		}
		return canvas.rtmphostlocal;
	]]>
	</method>
		
	<method name="getUrl">
	<![CDATA[
		return canvas.protocol + '://' + getHttpHost() + ':' + canvas.red5httpport + canvas.httpRootKey;
	]]>
	</method>
		
	<method name="getServicesUrl">
	<![CDATA[
		return getUrl() + 'services/';
	]]>
	</method>

	<method name="getTestingUrl">
	<![CDATA[
		return getUrl() + '?swf=networktesting' + ($debug ? 'debug' : '') + '.swf10.swf';
	]]>
	</method>

	<method name="getAppBaseUrl">
	<![CDATA[
		return getUrl() + "swf";
	]]>
	</method>

	<method name="myinit">
		<![CDATA[
		canvas.mediaerrortimeout = 30000;
		canvas.medialoadtimeout = 30000;
		
		if($debug) Debug.write("main.lzx/config.xml ondata",this);
		
		//Set Config-values by public/config.xml, see comments on public/config.xml
		if (!canvas.isCluster) {
			this.setAttribute('rtmphostlocal',canvas.myConfigSet.getPointer().xpathQuery('config/rtmphostlocal/text()'));
		}   
		this.setAttribute('rtmpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpport/text()')));  
		this.setAttribute('rtmpsslport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpsslport/text()'))); 
		
		var userSSLString = canvas.myConfigSet.getPointer().xpathQuery('config/useSSL/text()');
		if ($debug) Debug.write("userSSLString",userSSLString)
		if (userSSLString == "yes") {
			this.setAttribute('useSSL',true);
		}
		
		this.setAttribute('red5httpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/red5httpport/text()')));
		
		this.setAttribute('loudnessAcitviation',canvas.myConfigSet.getPointer().xpathQuery('config/loudnessAcitviation/text()'));
		this.setAttribute('webAppRootKey',canvas.myConfigSet.getPointer().xpathQuery('config/webAppRootKey/text()'));
		this.setAttribute('showWindowEffect',canvas.myConfigSet.getPointer().xpathQuery('config/showWindowEffect/text()'));
		
		//Audio-Video-Settings
		this.setAttribute('loudnessAcitviation',canvas.myConfigSet.getPointer().xpathQuery('config/loudnessAcitviation/text()'));
		this.setAttribute('codecType',canvas.myConfigSet.getPointer().xpathQuery('config/codecType/text()'));
		this.setAttribute('framesPerSecond',Number(canvas.myConfigSet.getPointer().xpathQuery('config/framesPerSecond/text()')));  
		this.setAttribute('bandwidthNeededNormal',Number(canvas.myConfigSet.getPointer().xpathQuery('config/bandwidthNeededNormal/text()')));  
		this.setAttribute('bandwidthNeededBest',Number(canvas.myConfigSet.getPointer().xpathQuery('config/bandwidthNeededBest/text()')));  
		this.setAttribute('camQualityNormal',Number(canvas.myConfigSet.getPointer().xpathQuery('config/camQualityNormal/text()')));  
		this.setAttribute('camQualityBest',Number(canvas.myConfigSet.getPointer().xpathQuery('config/camQualityBest/text()')));
		this.setAttribute('microphoneRateBest',Number(canvas.myConfigSet.getPointer().xpathQuery('config/microphoneRateBest/text()')));  
		this.setAttribute('echoPath',Number(canvas.myConfigSet.getPointer().xpathQuery('config/echoPath/text()')));
		this.setAttribute('echoSuppression',canvas.myConfigSet.getPointer().xpathQuery('config/echoSuppression/text()'));  
		
		this.setAttribute('defaultWhiteboardWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultWhiteboardWidth/text()')));  
		this.setAttribute('defaultWhiteboardHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultWhiteboardHeight/text()')));  
		
		
		this.setAttribute('httpRootKey',canvas.myConfigSet.getPointer().xpathQuery('config/httpRootKey/text()'));
		this.setAttribute('httphostlocal',canvas.myConfigSet.getPointer().xpathQuery('config/httphostlocal/text()'));
		this.setAttribute('protocol',canvas.myConfigSet.getPointer().xpathQuery('config/protocol/text()'));  
		this.setAttribute('proxyType',canvas.myConfigSet.getPointer().xpathQuery('config/proxyType/text()'));

		//set user color
		canvas.currentusercolor = canvas.getColorForUser();

		var _url = this.getDisplayObject().loaderInfo.url;
		if($debug) Debug.write("_url: ",_url);
		var cleanUrl = _url;
		
		var hasParams = _url.indexOf("?");
		if (hasParams != -1) {
			cleanUrl = _url.substr(0, hasParams);
		}
		
		if ($debug) Debug.write("_url ",_url,cleanUrl);
		var doubleSlash = cleanUrl.indexOf("//");
		var isNotPort80 = cleanUrl.indexOf(":", doubleSlash+2);
		if ($debug) Debug.write("isNotPort80: ",isNotPort80,doubleSlash);
		if (isNotPort80!=-1){
			//Debug.write("isNotPort80: ",doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2);
			var server = cleanUrl.substr(doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2); 
		} else {
			var server = cleanUrl.substr(doubleSlash+2, _url.indexOf("/", doubleSlash+2)-doubleSlash-2); 
		}
		
		if ($debug) Debug.write("this zielnr: ",this,server);
		
		this.setAttribute('rtmphost',server);
	
		if (this.rtmphostlocal.length==0){
			this.setAttribute('rtmphostlocal',server);
		}
		
		//Check for Invitation
		var invitationHash = lz.Browser.getInitArg('invitationHash');
		
		if ($debug) Debug.info("###################### -1 ");
		if ($debug) Debug.info("invitationHash :: ",invitationHash);
		
		if (invitationHash != undefined){
			canvas.isinitRoomDirect = true;
			canvas.invitationHash = invitationHash;
		}
		
		var secureHash = lz.Browser.getInitArg('secureHash');
		if (secureHash != undefined){
			canvas.secureRemoteUserLogin = true;
			canvas.secureHash = secureHash;
		}
		
		if ($debug) Debug.info("###################### -2 ");
		
		var language = lz.Browser.getInitArg('language');
		if (language != undefined) {
			canvas.language_id = Number(language);
		}
	
		var wicketroomid = lz.Browser.getInitArg('wicketroomid');
		if (wicketroomid != undefined && !isNaN(wicketroomid)) {
			canvas.setAttribute('wicketroomid', Number(wicketroomid));
			hib.userScope = canvas.wicketroomid;
		}
	   	canvas.setAttribute('wicketsid', null);
		var wicketsid = lz.Browser.getInitArg('wicketsid');
		if (wicketsid != undefined) {
			canvas.setAttribute('wicketsid', wicketsid);
		}
		var uid = lz.Browser.getInitArg('uid');
		if (!!uid) {
			canvas.setAttribute('publicSID', uid);
		}
		this.setBaseColors();
	
		//Debug.write("rtmphostlocal,rtmphost: ",canvas.rtmphostlocal,canvas.rtmphost); 
		var src = hib.getUrl();
		
		canvas.thishib.setAttribute('src',src);
		canvas.thishib.loaderVar = new lz.autoLoader(canvas);
		canvas.thishib.loaderVar._src.setAttribute('text',src);
		canvas.thishib.connect();
		]]>
	</method>
	
	<method name="getLabelName" args="id">
		//if($debug) Debug.write("main.lzx/getLabelName()",id);
		return getLabelTag(id);
	</method>
	
	<!--
		exportFilePNG exportFileJPG exportFilePDF exportFileSVG exportFileTIF
	 -->
	 
	<method name="doWhiteboardActionmenu" args="action">
		if (action == "exportFilePNG") {
			canvas._drawarea.confirmSaveAsImageTypeExport("image","png");
		} else if (action == "exportFileJPG") {
			canvas._drawarea.confirmSaveAsImageTypeExport("image","jpg");
		} else if (action == "exportFilePDF") {
			canvas._drawarea.confirmSaveAsImageTypeExport("image","pdf");
		} else if (action == "exportFileSVG") {
			canvas._drawarea.confirmSaveAsImageExport("image");
		} else if (action == "exportFileTIF") {
			canvas._drawarea.confirmSaveAsImageTypeExport("image","tif");
		}
	</method>

	<method name="quit">
		canvas.thishib.src = null;
		canvas.thishib.reconnectionAction = false;
		canvas.thishib.counterror = 100;
		canvas.thishib.disconnect();
		if (canvas.thishib._nc) {
			canvas.thishib._nc.close();
		}
		ExternalInterface.call("roomExit");
	</method>
	
	<method name="setRoomValues" args="roomObj">
	<![CDATA[
		if ($debug) Debug.warn("setRoomValues ",roomObj);
		//this is needed cause in the rpc-method *getCurrentModeratorList* we check if its room.type == 'restricted'
		//if so we will not show any *There is no Moderator* Warning Dialog
		canvas.currentRoomObj = roomObj;

		if (roomObj != null) {
			hib.currentroomid = roomObj.id;
			canvas.isConference = roomObj.type == 'conference';
			canvas.isInterview = roomObj.type == 'interview';
		
			if (roomObj.type == 'conference') {
				new lz.flexibleConferenceRoom(canvas.main_content._content.inner, {roomobj:roomObj});
			} else if (roomObj.type == 'restricted') {
				new lz.restrictedConferenceRoom(canvas.main_content._content.inner, {roomobj:roomObj});
			} else if (roomObj.type == 'interview') {
				new lz.interviewConferenceRoom(canvas.main_content._content.inner, {roomobj:roomObj});
			} 
		}
	]]>
	</method>

	<method name="parseLanugageObject" args="obj">
	
		////Debug.write('parseLanugageObject: ',obj);
		////Debug.write('parseLanugageObject: ',obj.childNodes);
		<![CDATA[
		var t = new Array();
		for (var i=0;i<obj.childNodes.length;i++){
			for (var k=0;k<obj.childNodes[i].childNodes.length;k++){
				////Debug.write(obj.childNodes[i].childNodes[k]);
				var t2 = new Array();
				t2[obj.childNodes[i].childNodes[k].childNodes[0].nodeName]=obj.childNodes[i].childNodes[k].childNodes[0].childNodes[0].data;
				t2[obj.childNodes[i].childNodes[k].childNodes[1].nodeName]=obj.childNodes[i].childNodes[k].childNodes[1].childNodes[0].data;
				t.push(t2);
			}
		}
		setLabelObject(t);
		canvas.initScreen();
		//Debug.write(t);
		]]>
	</method>
	
	<!---
	@doc The function does compare the new moderator list with the old and prepares the list 
		the removeModeratorList is used in the performance optimized user list of the restricted 
		room type to re-render the list items only if really something has changed in any 
		of the user list items
	 -->
	<method name="analyzeModerationList" args="newList">
	<![CDATA[
		canvas.removeModeratorList = new Array();
		
		if (canvas.currentModeratorList != null) {
			for (var i = 0; i < canvas.currentModeratorList.length; ++i) {
				canvas.currentModeratorList[i].found = false;
				for (var k = 0; k < newList.length; ++k) {
					if (newList[k].publicSID == canvas.currentModeratorList[i].publicSID) {
						canvas.currentModeratorList[i].found = true;
					}
				}
			}
		}
		if (canvas.currentModeratorList != null) {
			for (var i = 0; i < canvas.currentModeratorList.length; ++i) {
				if (!canvas.currentModeratorList[i].found) {
					canvas.removeModeratorList.push(canvas.currentModeratorList[i])
				}
			}
		}
		
		if ($debug) Debug.write("removeModeratorList :: ",canvas.removeModeratorList);
	]]>
	</method>
	
	<!---
		Updates the "ismoderator" flag
		the setAttribute method will broadcast an event to all event listeners that 
		did subscribe using the "onismoderator" handler with reference to canvas !
	 -->
	<method name="updateModerationFlag">
	<![CDATA[
		var isCurrentModerator = false;
		if ($debug) Debug.write("updateModerationFlag", canvas.removeModeratorList);
		for (var i = 0; i < canvas.removeModeratorList.length; ++i) {
			var item = canvas.removeModeratorList[i];
			if (canvas.publicSID == item.publicSID) {
				isCurrentModerator = false;
			}
		}
		if ($debug) Debug.write("updateModerationFlag", canvas.currentModeratorList);
		for (var i = 0; i < canvas.currentModeratorList.length; ++i) {
			var item = canvas.currentModeratorList[i];
			if (canvas.publicSID == item.publicSID) {
				isCurrentModerator = true;
			}
		}
		
		// do always spread this event, we need to broadcast the "onismoderator" event
		// so that we can update the status of other users in the user list
		try {
			canvas.setAttribute('ismoderator', isCurrentModerator);
		} catch (e:Error) {
			new lz.errorPopup(canvas, {error: "update moder "+e});
			if ($debug) Debug.error("updateModerationFlag::error ", e);
		}
	]]>
	</method> 
	
	<!---
		Checks if a certain publicSID is a moderator
	 -->
	<method name="getIsModeratorByPublicSID" args="publicSID">
	<![CDATA[
		for (var i = 0; i < canvas.currentModeratorList.length; ++i) {
			var item = canvas.currentModeratorList[i];
			if (publicSID == item.publicSID) {
				return true;
			}
		}
		return false;
	]]>
	</method>
	 
	<!---
		Sets the flag for the isAllowedToGiveExclusiveAudio status and broadcasts it to the 
		SWF10 container
	 -->
	<method name="setExclusiveAudioAllowStatus" args="roomClientObj">
	<![CDATA[
		if ($debug) Debug.write("giveExclusiveAudioStatus changes ###### ");
		if (roomClientObj.publicSID==canvas.publicSID) {
			canvas.setAttribute("isAllowedToGiveExclusiveAudio",roomClientObj.canGiveAudio);
			canvas.commonVideoViewContent.setExclusiveAudioAllowStatus(roomClientObj.canGiveAudio);
		}
	]]>
	</method>
	
	<method name="setMuteStatus" args="roomClientObj">
	<![CDATA[
		if ($debug) Debug.write("setMuteStatus changes ###### ",roomClientObj.micMuted);
		//Check for self status
		if (roomClientObj.publicSID == canvas.publicSID) {
			canvas.setAttribute("micMuted",roomClientObj.micMuted);
		}
		
		canvas._videocontainer.updateMuteStatusVideoView(roomClientObj);
		
		//Notify all Listeners for change of the item
		canvas.setAttribute("micMutedStatusChangedItem", roomClientObj);
	]]>
	</method>
	
	<method name="addFolderSequence" args="foldername">
	<![CDATA[
		this.uploadmoduleimgfolder = '/';
		this.uploadmoduleimgfolder += foldername;
		this.setAttribute('uploadmoduleimgfolder',this.uploadmoduleimgfolder);
	]]>
	</method>
		
		
	<handler name="onmousewheeldelta" reference="lz.Keys" args="d">
	<![CDATA[
		var obj = getCurrentMouseWheelObject();
		////Debug.write("onmousewheeldelta 12: ",d,obj);
		if (obj!=null) {
			obj.step(-d);
		}
	]]>
	</handler>	
	
	<method name="reverseWordingsBySplit" args="str">
	<![CDATA[
		var words_arr = str.split( " " ); // an array of chars
		for ( var i = 0, str = ""; i < words_arr.length; i++ ) // reverse their order
		{
			str += words_arr[ words_arr.length - i - 1 ];
			if (words_arr.length != 1) {
				str += " ";
			}
		}
		return str;
		
	]]>
	</method> 
	
	<method name="reverseAll" args="str">
	<![CDATA[
		var words_arr = str.split( "" ); // an array of chars
		for ( var i = 0, str = ""; i < words_arr.length; i++ ) // reverse their order
		{
			str += words_arr[ words_arr.length - i - 1 ];
			
		}
		return str;
		
	]]>
	</method> 
		
	<method name="reverseWords" args="str">
	<![CDATA[
		if ( str == "" || str == null ) return ""; // undefined
		// first char indicates the main directive of str (rtl/ltr)
		if ( isLTR( str.charCodeAt( 0 ) ) ) return str; // english or number
		var words_arr = str.split( "" ); // an array of chars
		for ( var i = 0, str = ""; i < words_arr.length; i++ ) // reverse their order
			str += words_arr[ words_arr.length - i - 1 ];
		return str;
	]]>
	</method>
		
	<method name="isLTR" args="c">
	<![CDATA[
		return ( c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 );
	]]>
	</method>
	
	<method name="isHEB" args="c">
	<![CDATA[
		return ( c >= 224 && c <= 250 );
	]]>
	</method>	
	
	<method name="setTextAlign" args="obj,type">
		switch ( type ) {
			case "left" :
				obj.setX( 0 );
			break;
			case "center" :
				obj.setX( this.parent.width / 2 - this.getTextWidth() / 2 );
			break;
			case "right" :
				obj.setX( this.parent.width - this.getTextWidth() );
			break;
		}
	</method>  
	
	<method name="getUserData">
		var so:SharedObject = SharedObject.getLocal('userdata');
		var g = so.data;
		if (g == null) {
			if($debug) Debug.write("sharedObject.getData IS null");
			g = new Array();
		}
		return g;
	</method>
	
	<method name="setUserData" args="g">
		var so:SharedObject = SharedObject.getLocal('userdata');
		for (var i in g) {
			if($debug) Debug.write("g[" + i + "] = ", g[i]);
			so.data[i] = g[i];
		}
		so.flush();
	</method>
	
	<method name="getThemeImage" args="tName">
		//if ($debug) Debug.write("load Image by Name: ",tName);
		var tPath = canvas.mainTheme.getPointer().xpathQuery("theme/resource[@name='"+tName+"']/@src");
		//if ($debug) Debug.write("tPath "+tPath);
		if (tPath == null) {
			if ($debug) Debug.warn("getThemeImage - No Image found for config: ",tName);
		} else {
			tPath = canvas.getUrl() + 'public/' + tPath; 
		}
		return tPath;
	</method>
	
	<method name="getThemeColor" args="tColor">
		//if ($debug) Debug.write("load Color by Name: ",tColor);
		var tResColor = canvas.mainTheme.getPointer().xpathQuery("theme/color[@name='"+tColor+"']/@value");
		//if ($debug) Debug.write("tColor "+tColor);
		if (tResColor == null) {
			if ($debug) Debug.warn("getThemeColor - No Color found for config: ",tColor);
		}
		return tResColor;
	</method>
	
	<method name="setBaseColors">
		defaultstyle.setAttribute("basecolor",canvas.getThemeColor('basebgcolorizer'));
		itemStyle.setAttribute("basecolor",canvas.getThemeColor('basebgcolorizer'));
		menuStyle.setAttribute("basecolor",canvas.getThemeColor('styleMenuBarBaseColor'));
		_conferencemenu.setAttribute("bgcolor",canvas.getThemeColor('baseMousecolorizer'));
		main_content.setAttribute("bgcolor",canvas.getThemeColor('mainBackgroundColor'));
	</method>

	<method name="getPictureUrl" args="pictureuri,extraParams">
	<![CDATA[
		var pUri = (pictureuri == null || pictureuri.length == 0) ? "d.jpg" : pictureuri;
		var downloadurl = pUri;
		if (!pUri.startsWith("http://") && !pUri.startsWith("https://")) {
			pUri = "_profile_" + pUri;
			
			downloadurl = canvas.getUrl() + 'DownloadHandler?fileName=' + pUri
				+ '&parentPath=&room_id=&r=' + (new Date()).getTime()
				+ extraParams + '&sid='+canvas.sessionId;
		}
		if($debug) Debug.write("getPictureUrl/downloadurl ", downloadurl);
		return downloadurl;
	]]>
	</method>

	<method name="getNotNullString" args="value">
		return value == null ? '' : value;
	</method>
	
	<method name="isRemoteUser" args="">
		return canvas.isinitRoomDirect || canvas.remoteUserLogin || canvas.directUserLogin || canvas.secureRemoteUserLogin;
	</method>
	
	<method name="loadImgBySrc" args="cmp, imgUrl, completeCallback">
		cmp.sprite.resource = imgUrl;
		if (!cmp.sprite.imgLoader) {
			if (cmp.sprite.resourceContainer) {
				// unload previous internal image-resource
				cmp.sprite.unload();
			}
			cmp.sprite.imgLoader = new Loader();
			cmp.sprite.imgLoader.mouseEnabled = false;// @devnote: see LPP-7022
			cmp.sprite.imgLoader.mouseChildren = false;
			cmp.sprite.resourceContainer = cmp.sprite.imgLoader;
			cmp.sprite.addChild(cmp.sprite.imgLoader);
		}
		var res:Loader = cmp.sprite.imgLoader;
		if (res) {
			res.scaleX = res.scaleY = 1.0;
		}
		if (completeCallback) {
			cmp.sprite.imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeCallback);
		}
		cmp.sprite.imgLoader.load(new URLRequest(imgUrl), LzSprite.loaderContext);
	</method>
</library>
