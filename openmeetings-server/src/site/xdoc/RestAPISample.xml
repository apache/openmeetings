<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 -->
<document xmlns="http://maven.apache.org/XDOC/2.0"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>REST API sample</title>
		<author email="dev@openmeetings.apache.org">Apache OpenMeetings Team</author>
	</properties>
	<body>
		<section name="Introduction">
			<p> For a detailed instruction which services, methods and params are available see the list in the <a href="/openmeetings-webservice/apidocs/index.html" target="_blank">SOAP/REST API</a> .
				ALL methods that are implemented for the SOAP API are also available via REST. 
			</p>
			<div class="bd-callout bd-callout-info">
				There is a <a href="https://openmeetings.apache.org/swagger/" target="_blank">OpenAPI spec</a> published in swagger format.
			</div>
			<div>
				You can query methods of each service using following suffixes
				<ul>
					<li>SOAP: <tt>?wsdl</tt> suffix, for example <tt>https://localhost:5443/openmeetings/services/UserService?wsdl</tt></li>
					<li>REST: as xml <tt>?_wadl</tt> for example <tt>https://localhost:5443/openmeetings/services/user?_wadl</tt></li>
					<li>REST: as json <tt>?_wadl&amp;type=json</tt> for example <tt>https://localhost:5443/openmeetings/services/user?_wadl&amp;type=json</tt></li>
				</ul>
				<div class="bd-callout bd-callout-info">
					The full list of services with All WSDLs/WADLs is available at following URL: <tt>https://localhost:5443/openmeetings/services/services</tt>
				</div>
			</div>
		</section>
		<section name="How to integrate using Node.js">
			<p>You can integrate OpenMeetings via the Rest API into your Node project.</p>
			<div class="bd-callout bd-callout-info">
				There is a community sponsored free module for integrating with Node.JS see: <a href="https://www.npmjs.com/package/openmeetings-node-client" target="_blank">openmeetings-node-client</a>
			</div>
			<p>Install the module</p>
<source>
npm install openmeetings-node-client
</source>
			<p>Eg generate a unique hash to enter a conference room:</p>
				<ol>
					<li>Login to service</li>
					<li>Generate Hash for entering a conference room</li>
					<li>Construct Login URL</li>
				</ol>
<source>
const {UserServiceApi, Configuration} = require("openmeetings-node-client");
const BASE_URL = "http://localhost:5080/openmeetings"

const config = new Configuration({
    basePath: BASE_URL + "/services"
})
// 1. Login to service
const loginResult = await userService.login("admin", "!HansHans")

// 2. Generate Hash for entering a conference room
const hashResult = await userService.getRoomHash(sessionId, {
        firstname: "John",
        lastname: "Doe",
        externalId: "uniqueId1",
        externalType: "myCMS",
        login: "john.doe",
        email: "john.doe@gmail.com"
    }, {
        roomId: 1,
        moderator: true
    })
    
// 3. Construct Login URL
const loginUrl = `${BASE_URL}/hash?secure=${hashResult.message}`
</source>
		<p>Full sample source code for can be found at: 
			<ol>
				<li>JavaScript/ES6 example using simplistic Express website see <a href="https://github.com/om-hosting/openmeetings-node-js-sample-project" target="_BLANK">Github openmeetings-node-js-sample-project</a></li>
				<li>TypeScript example using simplistic Express website <a href="https://github.com/om-hosting/openmeetings-node-sample-project" target="_BLANK">Github openmeetings-node-sample-project</a></li>
			</ol>
		</p>
		<p>More in depth examples and use cases can be found at the module page <a href="https://www.npmjs.com/package/openmeetings-node-client" target="_blank">https://www.npmjs.com/package/openmeetings-node-client</a></p>
		<div class="bd-callout bd-callout-info">
			A sample Node.js use case for a website using Express.js can be found here: <a href="https://om-hosting.com/openmeetings-integration-nodejs/" target="_BLANK">https://om-hosting.com/openmeetings-integration-nodejs/</a>
		</div>
		</section>
		<section name="How to get room hash via REST via jQuery">
			<ul>
				<li>
					First of all you need to perform login and get authorized SID to perform authorized operations
					<table>
						<tr>
							<td>Request</td>
							<td>Error response</td>
							<td>Successful response</td>
						</tr>
						<tr>
							<td>
<source>
$.ajax({
  method: "GET",
  url: "services/user/login",
  data: {user: 'admin', pass: '12345'},
  dataType: "json"
});
</source>
							</td>
							<td>
<source>
{
  "serviceResult": {
    "code": -11,
    "type": "ERROR"
  }
}
</source>
							</td>
							<td>
<source>
{
  "serviceResult": {
    "code": 1,
    "message": "78189aff-d68d-458a-8840-5b18d15a50b0",
    "type": "SUCCESS"
  }
}
</source>
							</td>
						</tr>
					</table>
				</li>
				<li>
					In case of error you can get detailed error message in your language as result of following query
					<tt>https://localhost:5443/openmeetings/services/error/<b>ERROR_ID</b>/<b>LANGUAGE_ID</b></tt>
					(for ex. https://localhost:5443/openmeetings/services/error/<b>-11</b>/<b>9</b>)
				</li>
				<li>If your request was successful you will get your SID as <b>message</b> (78189aff-d68d-458a-8840-5b18d15a50b0)</li>
				<li>Then you can use SID to generate room hash
					<table>
						<tr>
							<td>Request</td>
							<td>Successful response</td>
						</tr>
						<tr>
							<td>
<source>
$.ajax({
  method: "POST",
  url: "services/user/hash?sid=78189aff-d68d-458a-8840-5b18d15a50b0",
  data: {user: JSON.stringify({
      firstname: 'John',
      lastname: 'Doe',
      externalId: 'uid1',
      externalType: 'myCMS',
      login: 'superjohn'
      }),
    options: JSON.stringify({
      roomId: 5,
      moderator: true,
      showAudioVideoTest: true
      })
    },
  dataType: "json"
})
</source>
							</td>
							<td>
<source>
{
  "serviceResult": {
    "code": 0,
    "message": "fa1f9381-bd03-42ae-9fd9-332b5f775a1b",
    "type": "SUCCESS"
  }
}
</source>
							</td>
						</tr>
					</table>
				</li>
				<li>If your request was successful you will get your hash as <b>message</b> (fa1f9381-bd03-42ae-9fd9-332b5f775a1b)</li>
				<li>Now you can use following URL to enter the room: <tt>https://localhost:5443/openmeetings/hash?secure=fa1f9381-bd03-42ae-9fd9-332b5f775a1b&amp;language=1</tt></li>
			</ul>
		</section>
	</body>
</document>
